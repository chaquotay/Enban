<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using Enban.Text;
using Xunit;

namespace Enban.Test {

    /// <summary>
    /// Tests generated by ReadmeUsageTest.tt based on usage examples in README.md
    /// </summary>
    public class ReadmeUsageTest {

<#			var index=1; foreach(var entry in GetExamples("Parsing, validation and formatting of an IBAN","Constructing an IBAN from a BBAN (with check digit)")) { #>
        [Fact]
        public void Usage<#= index++ #>() {
            // ReSharper disable once InconsistentNaming
            var Console = new System.IO.StringWriter();

            <#= entry.Item1.Replace("\r\n", "\r\n            ") #>
			Assert.Equal("<#= entry.Item2 #>\r\n", Console.ToString());
        }

<#			} #>
    }
}

<#+

		private System.Collections.Generic.List<Tuple<string, string>> GetExamples(params string[] headings) {
			return headings.Select(GetExample).ToList();
		}

        private Tuple<string, string> GetExample(string heading)
        {
            var isInHeading = false;
            var isInCode = false;
            string result = null;
            var code = new StringBuilder();

            var file = this.Host.ResolvePath(@"..\..\README.md");
            foreach (var line in System.IO.File.ReadAllLines(file, Encoding.UTF8))
            {
                if (line.StartsWith("###"))
                {
                    isInHeading = line.Contains(heading);
                    if (!isInHeading)
                    {
                        isInCode = false;
                    }
                } else if (isInHeading)
                {
                    if (line.StartsWith("```csharp"))
                    {
                        isInCode = true;
                    } else if (line.StartsWith("```"))
                    {
                        isInCode = false;
                    } else if (line.StartsWith("prints `") && line.EndsWith("`"))
                    {
                        result = line.Substring(8, line.Length - 9);
                    } else if (isInCode)
                    {
                        code.AppendLine(line);
                    }
                }
            }
            return new Tuple<string, string>(code.ToString(), result);
        }
#>