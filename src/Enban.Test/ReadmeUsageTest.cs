using Enban.Text;
using Xunit;

namespace Enban.Test {

    /// <summary>
    /// Tests generated by ReadmeUsageTest.tt based on usage examples in README.md
    /// </summary>
    public class ReadmeUsageTest {

        [Fact]
        public void Usage1() {
            // ReSharper disable once InconsistentNaming
            var Console = new System.IO.StringWriter();

            var parsed = IBANPattern.Electronic.Parse("GI75NWBK000000007099453");
            if (parsed.Success && parsed.Value.CheckDigitValid)
            {
                Console.WriteLine($"IBAN '{parsed.Value:p}' is valid!");
            }
            
            Assert.Equal("IBAN 'GI75 NWBK 0000 0000 7099 453' is valid!\r\n", Console.ToString());
        }

        [Fact]
        public void Usage2() {
            // ReSharper disable once InconsistentNaming
            var Console = new System.IO.StringWriter();

            var germany = CountryProviders.Default["DE"];
            var iban = new BBAN(germany, "210501700012345678").ToIBAN();
            
            Console.WriteLine($"IBAN with check digit (valid: {iban.CheckDigitValid}): " + IBANPattern.Print.Format(iban));
            
            Assert.Equal("IBAN with check digit (valid: True): DE68 2105 0170 0012 3456 78\r\n", Console.ToString());
        }

    }
}

